plugins {
    id 'java'
    id 'jacoco'
    id 'findbugs'
    id 'checkstyle'
}
apply plugin: 'maven'
apply plugin: 'signing'

group 'io.github.yeyuexia'
archivesBaseName = "merge"
version '1.4.8'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'merge'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'An easy way to merge one bean into another bean.'
                url 'https://github.com/yeyuexia/merge'

                scm {
                    connection 'scm:git@github.com:yeyuexia/merge.git'
                    developerConnection 'scm:git@github.com:yeyuexia/merge.git'
                    url 'https://github.com/yeyuexia/merge'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'yeyuexia'
                        name 'Liu Zhuo'
                        email 'yyxworld@gmail.com'
                    }
                }
            }
        }
    }
}

dependencies {
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile 'io.github.dummie-java:dummie:1.0.1'
    testCompile group: 'com.google.guava', name: 'guava', version: '23.0'
}

checkstyle {
    toolVersion '8.1'
    ignoreFailures = false
    configFile file("$project.rootDir/config/checkstyle/google_checks.xml")
    sourceSets = [sourceSets.main]

    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }
}

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    excludeFilter = file("$project.rootDir/config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

jacoco {
    toolVersion = "0.8.2"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    '**.function.*',
                    '**.exception.*',
                    '**.CustomerCopierAdapter',
                    '**.UpdatedField'
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }
    dependsOn(jacocoTestReport)
}

check.dependsOn jacocoTestCoverageVerification

copy {
    from "./config/githooks/"
    into "./.git/hooks/"
    fileMode 0755
}